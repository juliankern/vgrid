/**
 * get all brekpoints as map
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @return {map} all breakpoints
 */
@function vgrid-getBreakpoints() {
    @return map-get(vgrid-getSettings(), 'breakpoints');
}

/**
 * get all rederable brekpoints as map
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @return {map} all breakpoints
 */
@function vgrid-getRenderableBreakpoints() {
    $breakpoints: map-get(vgrid-getSettings(), 'breakpoints');

    @each $bpkey, $value in $breakpoints {
        @if vgrid-getBreakpointValue($bpkey, virtual) == true {
            $breakpoints: map-remove($breakpoints, $bpkey);
        }
    }

    @return $breakpoints;
}

/**
 * Gets a map of breakpoint keys
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @return {array} array list
 */
@function vgrid-getBreakpointList() {
    @return map-keys(vgrid-getBreakpoints());
}

/**
 * Gets a map of renderable breakpoint keys
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @return {array} array list
 */
@function vgrid-getRederableBreakpointList() {
    @return map-keys(vgrid-getRenderableBreakpoints());
}

/**
 * gets a specific breakpoint map by it's key
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key Key of a specific brekpoint
 *
 * @return {map}      map of a specific breakpoint
 */
@function vgrid-getBreakpointByKey($key) {
    @return map-get(vgrid-getBreakpoints(), $key);
}

/**
 * gets a specific value from a specific brekpoint
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key   key of the brekpoint
 * @param  {string} $value key of the property
 *
 * @return {mixed}        value of the property
 */
@function vgrid-getBreakpointValue($key, $value) {
    $brvalue: map-get(vgrid-getBreakpointByKey($key), $value);
    @if not($brvalue) { $brvalue: 0; }
    @return $brvalue;
}

/**
 * gets a breakpoint length - difference to getBreakpointValue(): converts the value to the corrent format
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key   breakpoint key
 * @param  {string} $value breakpoint property
 *
 * @return {mixed}        length of the property
 */
@function vgrid-getBreakpointLength($key, $value) {
    $length: vgrid-getBreakpointValue($key, $value);
    @if vgrid-isPercentage($length) {
        @return $length;
    } @else {
        @return $length;
    }
}

/**
 * gets the min width for a breakpoint, for use in a media query
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key breakpoint key
 *
 * @return {string}      media query string
 */
@function vgrid-getMinBreakpoint($key) {
    $breakpoint: '';

    @if type-of($key) == 'number' and (unit($key) == 'px' or unit($key) == 'rem') {
        $breakpoint: $key;
    }
    @else {
        $breakpoint: vgrid-getBreakpointLength($key, min)
    }

    @if vgrid-strip-unit($breakpoint) == 0 {
        @return '';
    }

    @return '(min-width: #{$breakpoint})';
}

/**
 * gets the max width for a brekpoint, for use in a media query
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key breakpoint key
 *
 * @return {string}      media query string
 */
@function vgrid-getMaxBreakpoint($key) {
    $breakpoint: '';

    @if type-of($key) == 'number' and (unit($key) == 'px' or unit($key) == 'rem') {
        $breakpoint: $key;
    }
    @else {
        $breakpoint: vgrid-getBreakpointLength($key, max)
    }

    @if vgrid-strip-unit($breakpoint) == 0 {
        @return '';
    }

    @return '(max-width: #{$breakpoint})';
}

/**
 * gets the exact width for a breakpoint, for use in a media query
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key breakpoint key
 *
 * @return {string}      media query string
 */
@function vgrid-getEqBreakpoint($key) {
    @return '#{vgrid-getMinBreakpoint($key)} and #{vgrid-getMaxBreakpoint($key)}';
}


/**
 * checks if the brekpoint has a min value
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key breakpoint key
 *
 * @return {bool}      if the breakpoint has a min value
 */
@function vgrid-breakpointHasMin($key) {
    @return map-has-key(vgrid-getBreakpointByKey($key), 'min');
}

/**
 * checks if the brekpoint has a max value
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $key breakpoint key
 *
 * @return {bool}      if the brekpoint has a max value
 */
@function vgrid-breakpointHasMax($key) {
    @return map-has-key(vgrid-getBreakpointByKey($key), 'max');
}

/**
 * builds a media query for the given type and breakpoint
 *
 * @author Julian Kern <mail@juliankern.com>
 *
 * @param  {string} $type      type of breakpoint: min, max, eq
 * @param  {string} $key       breakpoint key
 * @param  {bool} $fallback: true          if it should fall back to min/max if the given type isn't set for this breakpoint
 *
 * @return {string}            full media query for the breakpoint
 */
@function vgrid-getMediaQuery($type, $key, $fallback: true) {
    $return: null;

    @if $type == retina {
        @return vgrid-getConstantValue(mediaQuerys, retina);
    }
    @else if $type == no-retina {
        @return vgrid-getConstantValue(mediaQuerys, noRetina);
    }
    @else if $type == landscape {
        $return: vgrid-getConstantValue(mediaQuerys, landscape);
    }
    @else if $type == portrait {
        $return: vgrid-getConstantValue(mediaQuerys, portrait);
    }
    @else if $type == touch {
        @return '.touch ';
    }
    @else if $type == no-touch {
        @return '.no-touch ';
    }
    @else if $type == min {
        @if type-of($key) == 'number' and (unit($key) == 'px' or unit($key) == 'rem') {
            $return: vgrid-getMinBreakpoint($key);
        }
        @else if not(vgrid-breakpointHasMin($key)) and $fallback {
            @warn 'Breakpoint #{$key} lacks "min", fallback to max-breakpoint';
            $return: vgrid-getMaxBreakpoint($key);
        }
        @else if not(vgrid-breakpointHasMin($key)) and not($fallback) {
            $return: vgrid-getMinBreakpoint($key);
        }
        @else {
            $return: vgrid-getMinBreakpoint($key);
        }
    }
    @else if $type == max {
        @if type-of($key) == 'number' and (unit($key) == 'px' or unit($key) == 'rem') {
            $return: vgrid-getMaxBreakpoint($key);
        }
        @else if not(vgrid-breakpointHasMax($key)) and $fallback {
            @warn 'Breakpoint #{$key} lacks "max", fallback to min-breakpoint';
            $return: vgrid-getMinBreakpoint($key);
        }
        @else if not(vgrid-breakpointHasMax($key)) and not($fallback) {
            $return: vgrid-getMaxBreakpoint($key);
        }
        @else {
            $return: vgrid-getMaxBreakpoint($key);
        }
    }
    @else if ($key == null and not($type == null)) or $type == eq {
        @if ($key == null) {
            $key: $type;
            $type: eq;
        }

        @if type-of($key) == 'number' and (unit($key) == 'px' or unit($key) == 'rem') and $type == eq {
            @warn 'If providing a pixel value, you need to choose if "min" or "max", fallback to min';
            $return: vgrid-getMinBreakpoint($key);
        }
        @else {
            @if vgrid-breakpointHasMin($key) and vgrid-breakpointHasMax($key) {
                $return: vgrid-getEqBreakpoint($key);
            }
            @else if vgrid-breakpointHasMin($key) and not(vgrid-breakpointHasMax($key)) {
                $return: vgrid-getMinBreakpoint($key);
            }
            @else if not(vgrid-breakpointHasMin($key)) and not(vgrid-breakpointHasMax($key)) {
                @error 'Breakpoint #{$key} misses min AND max!';
            }
            @else {
                $return: vgrid-getMaxBreakpoint($key);
            }
        }
    }

    @if $return == '' {
        @return '#{vgrid-getConfigValue(mqTarget)}';
    }
    @else if not($return == null) {
        @return '#{vgrid-getConfigValue(mqTarget)} and #{$return}';
    }
}
